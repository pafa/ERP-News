Anarki refactors the macro 'each into a higher-order fn 'walk, which takes an
object to traverse and a function to apply to each part of it, and a
simplified 'each macro that just wraps 'walk. Example:

    arc> (walk '(1 2 3) prn)
    1
    2
    3
    nil
    arc> (let old walk
           (def walk (x f)
             (old (if (and (isa x 'int) (>= x 0)) (range 1 x) x)
                  f)))
    *** redefining walk
    #<procedure: walk>
    arc> (walk 3 prn)
    1
    2
    3
    nil

In addition to not doing with a macro what can be done with a function, this
opens 'each up to extension. See lib/tree.arc for an example that extends
'each via 'walk.
